{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'Login',\n  data() {\n    return {\n      loginForm: {\n        username: '',\n        password: ''\n      },\n      rememberMe: false,\n      loading: false,\n      rules: {\n        username: [{\n          required: true,\n          message: '请输入用户名',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '请输入密码',\n          trigger: 'blur'\n        }, {\n          min: 6,\n          message: '密码长度不能少于6个字符',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    async handleLogin() {\n      this.$refs.loginForm.validate(async valid => {\n        if (!valid) {\n          this.$message.error('请填写正确的登录信息');\n          return false;\n        }\n        this.loading = true;\n        try {\n          const response = await axios.post('http://localhost:8001/login', this.loginForm);\n\n          // 确保响应包含 token 和 user 数据\n          if (response.data && response.data.token) {\n            // 安全地设置 token\n            localStorage.setItem('token', response.data.token);\n\n            // 确保 user 数据有效\n            const userData = response.data.user || {};\n            localStorage.setItem('user', JSON.stringify(userData));\n\n            // 提交到 Vuex store\n            if (this.$store && this.$store.commit) {\n              this.$store.commit('setToken', response.data.token);\n              this.$store.commit('setUser', userData);\n            }\n            this.$message.success('登录成功');\n            this.$router.push('/knowledge-base');\n          } else {\n            this.$message.error('登录失败：服务器响应无效');\n          }\n        } catch (error) {\n          // 增强错误处理\n          let errorMessage = '登录请求失败，请稍后重试';\n          if (error.response) {\n            if (error.response.status === 401) {\n              errorMessage = '用户名或密码错误';\n            } else if (error.response.data && error.response.data.detail) {\n              errorMessage = error.response.data.detail;\n            }\n          } else if (error.request) {\n            errorMessage = '无法连接到服务器';\n          }\n          this.$message.error(errorMessage);\n        } finally {\n          this.loading = false;\n        }\n      });\n    },\n    forgotPassword() {\n      this.$prompt('请输入您的邮箱', '重置密码', {\n        confirmButtonText: '发送重置邮件',\n        cancelButtonText: '取消',\n        inputPattern: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n        inputErrorMessage: '邮箱格式不正确'\n      }).then(({\n        value\n      }) => {\n        this.$message.success(`重置密码链接已发送至: ${value}`);\n      }).catch(() => {});\n    },\n    registerAccount() {\n      this.$message.info('注册功能即将开放');\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","loginForm","username","password","rememberMe","loading","rules","required","message","trigger","min","methods","handleLogin","$refs","validate","valid","$message","error","response","post","token","localStorage","setItem","userData","user","JSON","stringify","$store","commit","success","$router","push","errorMessage","status","detail","request","forgotPassword","$prompt","confirmButtonText","cancelButtonText","inputPattern","inputErrorMessage","then","value","catch","registerAccount","info"],"sources":["src/views/Login.vue"],"sourcesContent":["<template>\r\n    <div class=\"login-container\">\r\n        <el-form :model=\"loginForm\" class=\"login-form\" :rules=\"rules\" ref=\"loginForm\"\r\n            @submit.native.prevent=\"handleLogin\">\r\n            <h2 class=\"login-title\">知识库系统登录</h2>\r\n            <el-form-item prop=\"username\">\r\n                <el-input v-model=\"loginForm.username\" placeholder=\"用户名\" prefix-icon=\"el-icon-user\" clearable>\r\n                </el-input>\r\n            </el-form-item>\r\n            <el-form-item prop=\"password\">\r\n                <el-input v-model=\"loginForm.password\" type=\"password\" placeholder=\"密码\" prefix-icon=\"el-icon-lock\"\r\n                    show-password>\r\n                </el-input>\r\n            </el-form-item>\r\n            <el-form-item>\r\n                <el-checkbox v-model=\"rememberMe\">记住我</el-checkbox>\r\n            </el-form-item>\r\n            <el-form-item>\r\n                <el-button type=\"primary\" native-type=\"submit\" class=\"login-button\" :loading=\"loading\" round>\r\n                    登录\r\n                </el-button>\r\n            </el-form-item>\r\n            <div class=\"login-links\">\r\n                <a href=\"#\" @click.prevent=\"forgotPassword\">忘记密码?</a>\r\n                <a href=\"#\" @click.prevent=\"registerAccount\">注册账号</a>\r\n            </div>\r\n        </el-form>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n    name: 'Login',\r\n    data() {\r\n        return {\r\n            loginForm: {\r\n                username: '',\r\n                password: ''\r\n            },\r\n            rememberMe: false,\r\n            loading: false,\r\n            rules: {\r\n                username: [\r\n                    { required: true, message: '请输入用户名', trigger: 'blur' }\r\n                ],\r\n                password: [\r\n                    { required: true, message: '请输入密码', trigger: 'blur' },\r\n                    { min: 6, message: '密码长度不能少于6个字符', trigger: 'blur' }\r\n                ]\r\n            }\r\n        };\r\n    },\r\n    methods: {\r\n        async handleLogin() {\r\n            this.$refs.loginForm.validate(async (valid) => {\r\n                if (!valid) {\r\n                    this.$message.error('请填写正确的登录信息');\r\n                    return false;\r\n                }\r\n\r\n                this.loading = true;\r\n                try {\r\n                    const response = await axios.post('http://localhost:8001/login', this.loginForm);\r\n\r\n                    // 确保响应包含 token 和 user 数据\r\n                    if (response.data && response.data.token) {\r\n                        // 安全地设置 token\r\n                        localStorage.setItem('token', response.data.token);\r\n\r\n                        // 确保 user 数据有效\r\n                        const userData = response.data.user || {};\r\n                        localStorage.setItem('user', JSON.stringify(userData));\r\n\r\n                        // 提交到 Vuex store\r\n                        if (this.$store && this.$store.commit) {\r\n                            this.$store.commit('setToken', response.data.token);\r\n                            this.$store.commit('setUser', userData);\r\n                        }\r\n\r\n                        this.$message.success('登录成功');\r\n                        this.$router.push('/knowledge-base');\r\n                    } else {\r\n                        this.$message.error('登录失败：服务器响应无效');\r\n                    }\r\n                } catch (error) {\r\n                    // 增强错误处理\r\n                    let errorMessage = '登录请求失败，请稍后重试';\r\n\r\n                    if (error.response) {\r\n                        if (error.response.status === 401) {\r\n                            errorMessage = '用户名或密码错误';\r\n                        } else if (error.response.data && error.response.data.detail) {\r\n                            errorMessage = error.response.data.detail;\r\n                        }\r\n                    } else if (error.request) {\r\n                        errorMessage = '无法连接到服务器';\r\n                    }\r\n\r\n                    this.$message.error(errorMessage);\r\n                } finally {\r\n                    this.loading = false;\r\n                }\r\n            });\r\n        },\r\n        forgotPassword() {\r\n            this.$prompt('请输入您的邮箱', '重置密码', {\r\n                confirmButtonText: '发送重置邮件',\r\n                cancelButtonText: '取消',\r\n                inputPattern: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\r\n                inputErrorMessage: '邮箱格式不正确'\r\n            }).then(({ value }) => {\r\n                this.$message.success(`重置密码链接已发送至: ${value}`);\r\n            }).catch(() => { });\r\n        },\r\n        registerAccount() {\r\n            this.$message.info('注册功能即将开放');\r\n        }\r\n    }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.login-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100vh;\r\n    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\r\n}\r\n\r\n.login-form {\r\n    width: 400px;\r\n    padding: 30px;\r\n    background: #fff;\r\n    border-radius: 8px;\r\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.login-title {\r\n    text-align: center;\r\n    margin-bottom: 30px;\r\n    color: #303133;\r\n    font-weight: 600;\r\n}\r\n\r\n.login-button {\r\n    width: 100%;\r\n    margin-top: 10px;\r\n}\r\n\r\n.login-links {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin-top: 15px;\r\n}\r\n\r\n.login-links a {\r\n    color: #606266;\r\n    text-decoration: none;\r\n    font-size: 14px;\r\n}\r\n\r\n.login-links a:hover {\r\n    color: #409EFF;\r\n}\r\n</style>"],"mappings":"AA+BA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;QACAC,QAAA;QACAC,QAAA;MACA;MACAC,UAAA;MACAC,OAAA;MACAC,KAAA;QACAJ,QAAA,GACA;UAAAK,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAN,QAAA,GACA;UAAAI,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,GAAA;UAAAF,OAAA;UAAAC,OAAA;QAAA;MAEA;IACA;EACA;EACAE,OAAA;IACA,MAAAC,YAAA;MACA,KAAAC,KAAA,CAAAZ,SAAA,CAAAa,QAAA,OAAAC,KAAA;QACA,KAAAA,KAAA;UACA,KAAAC,QAAA,CAAAC,KAAA;UACA;QACA;QAEA,KAAAZ,OAAA;QACA;UACA,MAAAa,QAAA,SAAApB,KAAA,CAAAqB,IAAA,qCAAAlB,SAAA;;UAEA;UACA,IAAAiB,QAAA,CAAAlB,IAAA,IAAAkB,QAAA,CAAAlB,IAAA,CAAAoB,KAAA;YACA;YACAC,YAAA,CAAAC,OAAA,UAAAJ,QAAA,CAAAlB,IAAA,CAAAoB,KAAA;;YAEA;YACA,MAAAG,QAAA,GAAAL,QAAA,CAAAlB,IAAA,CAAAwB,IAAA;YACAH,YAAA,CAAAC,OAAA,SAAAG,IAAA,CAAAC,SAAA,CAAAH,QAAA;;YAEA;YACA,SAAAI,MAAA,SAAAA,MAAA,CAAAC,MAAA;cACA,KAAAD,MAAA,CAAAC,MAAA,aAAAV,QAAA,CAAAlB,IAAA,CAAAoB,KAAA;cACA,KAAAO,MAAA,CAAAC,MAAA,YAAAL,QAAA;YACA;YAEA,KAAAP,QAAA,CAAAa,OAAA;YACA,KAAAC,OAAA,CAAAC,IAAA;UACA;YACA,KAAAf,QAAA,CAAAC,KAAA;UACA;QACA,SAAAA,KAAA;UACA;UACA,IAAAe,YAAA;UAEA,IAAAf,KAAA,CAAAC,QAAA;YACA,IAAAD,KAAA,CAAAC,QAAA,CAAAe,MAAA;cACAD,YAAA;YACA,WAAAf,KAAA,CAAAC,QAAA,CAAAlB,IAAA,IAAAiB,KAAA,CAAAC,QAAA,CAAAlB,IAAA,CAAAkC,MAAA;cACAF,YAAA,GAAAf,KAAA,CAAAC,QAAA,CAAAlB,IAAA,CAAAkC,MAAA;YACA;UACA,WAAAjB,KAAA,CAAAkB,OAAA;YACAH,YAAA;UACA;UAEA,KAAAhB,QAAA,CAAAC,KAAA,CAAAe,YAAA;QACA;UACA,KAAA3B,OAAA;QACA;MACA;IACA;IACA+B,eAAA;MACA,KAAAC,OAAA;QACAC,iBAAA;QACAC,gBAAA;QACAC,YAAA;QACAC,iBAAA;MACA,GAAAC,IAAA;QAAAC;MAAA;QACA,KAAA3B,QAAA,CAAAa,OAAA,gBAAAc,KAAA;MACA,GAAAC,KAAA;IACA;IACAC,gBAAA;MACA,KAAA7B,QAAA,CAAA8B,IAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}