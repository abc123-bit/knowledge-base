{"ast":null,"code":"import FileUpload from '@/components/FileUpload.vue';\nimport ChatBox from '@/components/ChatBox.vue';\nimport axios from 'axios';\nexport default {\n  name: 'HomePage',\n  components: {\n    FileUpload,\n    ChatBox\n  },\n  data() {\n    return {\n      username: '管理员',\n      userAvatar: require('@/assets/logo.png'),\n      isAdmin: false,\n      knowledgeBases: [],\n      currentKb: null,\n      currentKbDetails: null,\n      loading: false,\n      editDialogVisible: false,\n      editForm: {\n        id: null,\n        name: '',\n        description: ''\n      },\n      editType: 'create',\n      // 'create' 或 'edit'\n      fileTypes: {\n        pdf: 'pdf-color',\n        txt: 'txt-color',\n        doc: 'doc-color',\n        docx: 'doc-color'\n      }\n    };\n  },\n  computed: {\n    editDialogTitle() {\n      return this.editType === 'create' ? '新建知识库' : '编辑知识库';\n    }\n  },\n  created() {\n    this.initUserData();\n    this.fetchKnowledgeBases();\n  },\n  methods: {\n    initUserData() {\n      const userData = localStorage.getItem('user');\n      if (userData) {\n        const user = JSON.parse(userData);\n        this.username = user.username || '管理员';\n        this.isAdmin = user.is_admin || false;\n        if (user.avatar) {\n          this.userAvatar = user.avatar;\n        }\n      }\n    },\n    async fetchKnowledgeBases() {\n      this.loading = true;\n      try {\n        // 模拟API调用获取知识库列表\n        await new Promise(resolve => setTimeout(resolve, 800));\n\n        // 模拟数据\n        this.knowledgeBases = [{\n          id: 1,\n          name: '产品手册',\n          file_count: 8,\n          description: '包含所有产品手册和说明文档',\n          files: [{\n            id: 101,\n            name: '产品使用指南.pdf',\n            type: 'pdf',\n            size: 2456789,\n            upload_time: '2023-06-15T08:30:00Z'\n          }, {\n            id: 102,\n            name: '安装说明.txt',\n            type: 'txt',\n            size: 12456,\n            upload_time: '2023-06-18T14:20:00Z'\n          }]\n        }, {\n          id: 2,\n          name: '技术文档',\n          file_count: 12,\n          description: '技术规范和API文档',\n          files: [{\n            id: 201,\n            name: 'API接口文档.docx',\n            type: 'docx',\n            size: 3456789,\n            upload_time: '2023-06-20T10:45:00Z'\n          }]\n        }, {\n          id: 3,\n          name: '客户支持',\n          file_count: 5,\n          description: '常见问题解答和客户支持材料',\n          files: []\n        }];\n        if (this.knowledgeBases.length > 0 && !this.currentKb) {\n          this.currentKb = this.knowledgeBases[0].id;\n          this.currentKbDetails = this.knowledgeBases[0];\n        }\n      } catch (error) {\n        this.$message.error('获取知识库失败: ' + (error.message || '未知错误'));\n      } finally {\n        this.loading = false;\n      }\n    },\n    handleKbChange(kbId) {\n      this.currentKbDetails = this.knowledgeBases.find(kb => kb.id === kbId) || null;\n    },\n    createKB() {\n      this.editType = 'create';\n      this.editForm = {\n        id: null,\n        name: '',\n        description: ''\n      };\n      this.editDialogVisible = true;\n    },\n    editKB(kb) {\n      this.editType = 'edit';\n      this.editForm = {\n        id: kb.id,\n        name: kb.name,\n        description: kb.description || ''\n      };\n      this.editDialogVisible = true;\n    },\n    confirmEdit() {\n      if (!this.editForm.name.trim()) {\n        this.$message.warning('请输入知识库名称');\n        return;\n      }\n      if (this.editType === 'create') {\n        // 创建新知识库\n        const newKb = {\n          id: Date.now(),\n          name: this.editForm.name,\n          description: this.editForm.description,\n          file_count: 0,\n          files: []\n        };\n        this.knowledgeBases.push(newKb);\n        this.currentKb = newKb.id;\n        this.currentKbDetails = newKb;\n        this.$message.success(`知识库\"${newKb.name}\"创建成功`);\n      } else {\n        // 编辑现有知识库\n        const kbIndex = this.knowledgeBases.findIndex(kb => kb.id === this.editForm.id);\n        if (kbIndex !== -1) {\n          this.knowledgeBases[kbIndex].name = this.editForm.name;\n          this.knowledgeBases[kbIndex].description = this.editForm.description;\n          if (this.currentKb === this.editForm.id) {\n            this.currentKbDetails = this.knowledgeBases[kbIndex];\n          }\n          this.$message.success('知识库更新成功');\n        }\n      }\n      this.editDialogVisible = false;\n    },\n    deleteKb(kb) {\n      this.$confirm(`确定删除知识库 \"${kb.name}\"? 所有关联文件也将被删除`, '删除确认', {\n        confirmButtonText: '删除',\n        cancelButtonText: '取消',\n        type: 'warning',\n        confirmButtonClass: 'el-button--danger'\n      }).then(() => {\n        const kbIndex = this.knowledgeBases.findIndex(k => k.id === kb.id);\n        if (kbIndex !== -1) {\n          this.knowledgeBases.splice(kbIndex, 1);\n          if (this.currentKb === kb.id) {\n            this.currentKb = this.knowledgeBases.length > 0 ? this.knowledgeBases[0].id : null;\n            this.currentKbDetails = this.currentKb ? this.knowledgeBases[0] : null;\n          }\n          this.$message.success('知识库已删除');\n        }\n      }).catch(() => {});\n    },\n    handleUploadSuccess(fileData) {\n      if (!this.currentKbDetails.files) {\n        this.currentKbDetails.files = [];\n      }\n      this.currentKbDetails.files.push({\n        id: Date.now(),\n        name: fileData.filename,\n        type: fileData.type || 'unknown',\n        size: fileData.size || 0,\n        upload_time: new Date().toISOString()\n      });\n      this.currentKbDetails.file_count = this.currentKbDetails.files.length;\n      this.$message.success(`文件\"${fileData.filename}\"上传成功`);\n    },\n    getFileIcon(fileType) {\n      const type = fileType.toLowerCase();\n      return this.fileTypes[type] || 'el-icon-document';\n    },\n    formatSize(bytes) {\n      if (bytes === 0) return '0 B';\n      const k = 1024;\n      const sizes = ['B', 'KB', 'MB', 'GB'];\n      const i = Math.floor(Math.log(bytes) / Math.log(k));\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    },\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;\n    },\n    downloadFile(file) {\n      this.$message.info(`开始下载: ${file.name}`);\n      // 实际应用中这里应调用API下载文件\n    },\n    previewFile(file) {\n      this.$message.info(`预览文件: ${file.name}`);\n      // 实际应用中这里应实现文件预览功能\n    },\n    deleteFile(file) {\n      this.$confirm(`确定删除文件 \"${file.name}\"?`, '删除确认', {\n        confirmButtonText: '删除',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        const fileIndex = this.currentKbDetails.files.findIndex(f => f.id === file.id);\n        if (fileIndex !== -1) {\n          this.currentKbDetails.files.splice(fileIndex, 1);\n          this.currentKbDetails.file_count = this.currentKbDetails.files.length;\n          this.$message.success('文件已删除');\n        }\n      }).catch(() => {});\n    },\n    goToAdmin() {\n      this.$router.push('/admin');\n    },\n    logout() {\n      this.$confirm('确定要退出登录吗?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'info'\n      }).then(() => {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        if (this.$store) {\n          this.$store.commit('setToken', null);\n          this.$store.commit('setUser', null);\n        }\n        this.$router.push('/login');\n        this.$message.success('您已成功退出登录');\n      }).catch(() => {});\n    }\n  }\n};","map":{"version":3,"names":["FileUpload","ChatBox","axios","name","components","data","username","userAvatar","require","isAdmin","knowledgeBases","currentKb","currentKbDetails","loading","editDialogVisible","editForm","id","description","editType","fileTypes","pdf","txt","doc","docx","computed","editDialogTitle","created","initUserData","fetchKnowledgeBases","methods","userData","localStorage","getItem","user","JSON","parse","is_admin","avatar","Promise","resolve","setTimeout","file_count","files","type","size","upload_time","length","error","$message","message","handleKbChange","kbId","find","kb","createKB","editKB","confirmEdit","trim","warning","newKb","Date","now","push","success","kbIndex","findIndex","deleteKb","$confirm","confirmButtonText","cancelButtonText","confirmButtonClass","then","k","splice","catch","handleUploadSuccess","fileData","filename","toISOString","getFileIcon","fileType","toLowerCase","formatSize","bytes","sizes","i","Math","floor","log","parseFloat","pow","toFixed","formatDate","dateString","date","getFullYear","getMonth","toString","padStart","getDate","downloadFile","file","info","previewFile","deleteFile","fileIndex","f","goToAdmin","$router","logout","removeItem","$store","commit"],"sources":["src/views/apps.vue"],"sourcesContent":["<template>\r\n  <div class=\"home-container\">\r\n    <!-- 顶部导航栏 -->\r\n    <el-header class=\"app-header\">\r\n      <div class=\"header-left\">\r\n        <h1 class=\"app-title\">知识库智能助手</h1>\r\n      </div>\r\n      <div class=\"header-right\">\r\n        <el-dropdown>\r\n          <span class=\"user-info\">\r\n            <el-avatar :src=\"userAvatar\" size=\"small\"></el-avatar>\r\n            <span class=\"username\">{{ username }}</span>\r\n            <i class=\"el-icon-caret-bottom\"></i>\r\n          </span>\r\n          <el-dropdown-menu slot=\"dropdown\">\r\n            <el-dropdown-item @click.native=\"goToAdmin\" v-if=\"isAdmin\">\r\n              <i class=\"el-icon-s-custom\"></i> 管理后台\r\n            </el-dropdown-item>\r\n            <el-dropdown-item @click.native=\"logout\">\r\n              <i class=\"el-icon-switch-button\"></i> 退出登录\r\n            </el-dropdown-item>\r\n          </el-dropdown-menu>\r\n        </el-dropdown>\r\n      </div>\r\n    </el-header>\r\n\r\n    <div class=\"main-content\">\r\n      <!-- 左侧知识库管理区域 -->\r\n      <div class=\"knowledge-section\">\r\n        <div class=\"section-header\">\r\n          <h2 class=\"section-title\">知识库管理</h2>\r\n          <el-button \r\n            type=\"primary\" \r\n            icon=\"el-icon-plus\" \r\n            @click=\"createKB\"\r\n            size=\"small\"\r\n            class=\"create-btn\">\r\n            新建\r\n          </el-button>\r\n        </div>\r\n        \r\n        <!-- 知识库选择 -->\r\n        <div class=\"kb-selector\">\r\n          <el-select \r\n            v-model=\"currentKb\" \r\n            placeholder=\"选择知识库\" \r\n            class=\"kb-dropdown\"\r\n            @change=\"handleKbChange\"\r\n            filterable>\r\n            <el-option\r\n              v-for=\"kb in knowledgeBases\"\r\n              :key=\"kb.id\"\r\n              :label=\"kb.name\"\r\n              :value=\"kb.id\">\r\n              <div class=\"kb-option\">\r\n                <span>{{ kb.name }}</span>\r\n                <span class=\"file-count\">{{ kb.file_count }}个文件</span>\r\n              </div>\r\n            </el-option>\r\n          </el-select>\r\n        </div>\r\n        \r\n        <!-- 文件上传区域 -->\r\n        <div class=\"upload-section\" v-if=\"currentKbDetails\">\r\n          <div class=\"upload-header\">\r\n            <h3>上传文件</h3>\r\n            <el-tooltip content=\"支持PDF、TXT、DOCX格式\" placement=\"top\">\r\n              <i class=\"el-icon-question\"></i>\r\n            </el-tooltip>\r\n          </div>\r\n          <FileUpload :kb-id=\"currentKb\" @uploaded=\"handleUploadSuccess\"/>\r\n        </div>\r\n        \r\n        <!-- 知识库文件列表 -->\r\n        <div class=\"kb-files\" v-if=\"currentKbDetails && currentKbDetails.files && currentKbDetails.files.length > 0\">\r\n          <div class=\"section-header\">\r\n            <h3>文件列表</h3>\r\n            <span class=\"file-count\">{{ currentKbDetails.files.length }}个文件</span>\r\n          </div>\r\n          \r\n          <el-scrollbar class=\"file-list\">\r\n            <div \r\n              v-for=\"file in currentKbDetails.files\" \r\n              :key=\"file.id\" \r\n              class=\"file-item\">\r\n              <div class=\"file-info\">\r\n                <i class=\"el-icon-document\" :class=\"getFileIcon(file.type)\"></i>\r\n                <div class=\"file-details\">\r\n                  <div class=\"file-name\">{{ file.name }}</div>\r\n                  <div class=\"file-meta\">\r\n                    <span>{{ formatSize(file.size) }}</span>\r\n                    <span>•</span>\r\n                    <span>{{ formatDate(file.upload_time) }}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <el-dropdown trigger=\"click\" class=\"file-actions\">\r\n                <span class=\"el-dropdown-link\">\r\n                  <i class=\"el-icon-more\"></i>\r\n                </span>\r\n                <el-dropdown-menu slot=\"dropdown\">\r\n                  <el-dropdown-item @click.native=\"downloadFile(file)\">\r\n                    <i class=\"el-icon-download\"></i> 下载\r\n                  </el-dropdown-item>\r\n                  <el-dropdown-item @click.native=\"previewFile(file)\" divided>\r\n                    <i class=\"el-icon-view\"></i> 预览\r\n                  </el-dropdown-item>\r\n                  <el-dropdown-item @click.native=\"deleteFile(file)\" divided class=\"danger-item\">\r\n                    <i class=\"el-icon-delete\"></i> 删除\r\n                  </el-dropdown-item>\r\n                </el-dropdown-menu>\r\n              </el-dropdown>\r\n            </div>\r\n          </el-scrollbar>\r\n        </div>\r\n        \r\n        <!-- 空状态 -->\r\n        <div class=\"empty-state\" v-if=\"knowledgeBases.length === 0\">\r\n          \r\n          <p>您还没有创建任何知识库</p>\r\n          <el-button type=\"primary\" @click=\"createKB\">创建第一个知识库</el-button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 右侧聊天区域 -->\r\n      <div class=\"chat-section\">\r\n        <div class=\"section-header\">\r\n          <h2 class=\"section-title\">智能对话</h2>\r\n          <div class=\"kb-info\" v-if=\"currentKbDetails\">\r\n            <el-tag type=\"info\" size=\"small\">{{ currentKbDetails.name }}</el-tag>\r\n            <el-tooltip content=\"当前知识库\">\r\n              <i class=\"el-icon-info\"></i>\r\n            </el-tooltip>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"chat-container\">\r\n          <div v-if=\"currentKb\" class=\"chat-wrapper\">\r\n            <ChatBox :kb-id=\"currentKb\" class=\"chat-box\"/>\r\n          </div>\r\n          <div v-else class=\"chat-empty\">\r\n            \r\n            <p>请先选择或创建一个知识库开始对话</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 知识库编辑对话框 -->\r\n    <el-dialog\r\n      :title=\"editDialogTitle\"\r\n      :visible.sync=\"editDialogVisible\"\r\n      width=\"30%\">\r\n      <el-form :model=\"editForm\" label-width=\"80px\">\r\n        <el-form-item label=\"名称\">\r\n          <el-input v-model=\"editForm.name\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"描述\">\r\n          <el-input \r\n            type=\"textarea\" \r\n            v-model=\"editForm.description\" \r\n            :autosize=\"{ minRows: 2, maxRows: 4 }\"\r\n            placeholder=\"请输入知识库描述\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"editDialogVisible = false\">取消</el-button>\r\n        <el-button type=\"primary\" @click=\"confirmEdit\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport FileUpload from '@/components/FileUpload.vue';\r\nimport ChatBox from '@/components/ChatBox.vue';\r\n\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'HomePage',\r\n  components: {\r\n    FileUpload,\r\n    ChatBox\r\n  },\r\n  data() {\r\n    return {\r\n      username: '管理员',\r\n      userAvatar: require('@/assets/logo.png'),\r\n      isAdmin: false,\r\n      knowledgeBases: [],\r\n      currentKb: null,\r\n      currentKbDetails: null,\r\n      loading: false,\r\n      editDialogVisible: false,\r\n      editForm: {\r\n        id: null,\r\n        name: '',\r\n        description: ''\r\n      },\r\n      editType: 'create', // 'create' 或 'edit'\r\n      fileTypes: {\r\n        pdf: 'pdf-color',\r\n        txt: 'txt-color',\r\n        doc: 'doc-color',\r\n        docx: 'doc-color'\r\n      }\r\n    };\r\n  },\r\n  computed: {\r\n    editDialogTitle() {\r\n      return this.editType === 'create' ? '新建知识库' : '编辑知识库';\r\n    }\r\n  },\r\n  created() {\r\n    this.initUserData();\r\n    this.fetchKnowledgeBases();\r\n  },\r\n  methods: {\r\n    initUserData() {\r\n      const userData = localStorage.getItem('user');\r\n      if (userData) {\r\n        const user = JSON.parse(userData);\r\n        this.username = user.username || '管理员';\r\n        this.isAdmin = user.is_admin || false;\r\n        if (user.avatar) {\r\n          this.userAvatar = user.avatar;\r\n        }\r\n      }\r\n    },\r\n    \r\n    async fetchKnowledgeBases() {\r\n      this.loading = true;\r\n      try {\r\n        // 模拟API调用获取知识库列表\r\n        await new Promise(resolve => setTimeout(resolve, 800));\r\n        \r\n        // 模拟数据\r\n        this.knowledgeBases = [\r\n          { id: 1, name: '产品手册', file_count: 8, description: '包含所有产品手册和说明文档', files: [\r\n            { id: 101, name: '产品使用指南.pdf', type: 'pdf', size: 2456789, upload_time: '2023-06-15T08:30:00Z' },\r\n            { id: 102, name: '安装说明.txt', type: 'txt', size: 12456, upload_time: '2023-06-18T14:20:00Z' }\r\n          ]},\r\n          { id: 2, name: '技术文档', file_count: 12, description: '技术规范和API文档', files: [\r\n            { id: 201, name: 'API接口文档.docx', type: 'docx', size: 3456789, upload_time: '2023-06-20T10:45:00Z' }\r\n          ]},\r\n          { id: 3, name: '客户支持', file_count: 5, description: '常见问题解答和客户支持材料', files: [] }\r\n        ];\r\n        \r\n        if (this.knowledgeBases.length > 0 && !this.currentKb) {\r\n          this.currentKb = this.knowledgeBases[0].id;\r\n          this.currentKbDetails = this.knowledgeBases[0];\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('获取知识库失败: ' + (error.message || '未知错误'));\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n    \r\n    handleKbChange(kbId) {\r\n      this.currentKbDetails = this.knowledgeBases.find(kb => kb.id === kbId) || null;\r\n    },\r\n    \r\n    createKB() {\r\n      this.editType = 'create';\r\n      this.editForm = {\r\n        id: null,\r\n        name: '',\r\n        description: ''\r\n      };\r\n      this.editDialogVisible = true;\r\n    },\r\n    \r\n    editKB(kb) {\r\n      this.editType = 'edit';\r\n      this.editForm = {\r\n        id: kb.id,\r\n        name: kb.name,\r\n        description: kb.description || ''\r\n      };\r\n      this.editDialogVisible = true;\r\n    },\r\n    \r\n    confirmEdit() {\r\n      if (!this.editForm.name.trim()) {\r\n        this.$message.warning('请输入知识库名称');\r\n        return;\r\n      }\r\n      \r\n      if (this.editType === 'create') {\r\n        // 创建新知识库\r\n        const newKb = {\r\n          id: Date.now(),\r\n          name: this.editForm.name,\r\n          description: this.editForm.description,\r\n          file_count: 0,\r\n          files: []\r\n        };\r\n        \r\n        this.knowledgeBases.push(newKb);\r\n        this.currentKb = newKb.id;\r\n        this.currentKbDetails = newKb;\r\n        this.$message.success(`知识库\"${newKb.name}\"创建成功`);\r\n      } else {\r\n        // 编辑现有知识库\r\n        const kbIndex = this.knowledgeBases.findIndex(kb => kb.id === this.editForm.id);\r\n        if (kbIndex !== -1) {\r\n          this.knowledgeBases[kbIndex].name = this.editForm.name;\r\n          this.knowledgeBases[kbIndex].description = this.editForm.description;\r\n          \r\n          if (this.currentKb === this.editForm.id) {\r\n            this.currentKbDetails = this.knowledgeBases[kbIndex];\r\n          }\r\n          \r\n          this.$message.success('知识库更新成功');\r\n        }\r\n      }\r\n      \r\n      this.editDialogVisible = false;\r\n    },\r\n    \r\n    deleteKb(kb) {\r\n      this.$confirm(`确定删除知识库 \"${kb.name}\"? 所有关联文件也将被删除`, '删除确认', {\r\n        confirmButtonText: '删除',\r\n        cancelButtonText: '取消',\r\n        type: 'warning',\r\n        confirmButtonClass: 'el-button--danger'\r\n      }).then(() => {\r\n        const kbIndex = this.knowledgeBases.findIndex(k => k.id === kb.id);\r\n        if (kbIndex !== -1) {\r\n          this.knowledgeBases.splice(kbIndex, 1);\r\n          \r\n          if (this.currentKb === kb.id) {\r\n            this.currentKb = this.knowledgeBases.length > 0 ? this.knowledgeBases[0].id : null;\r\n            this.currentKbDetails = this.currentKb ? this.knowledgeBases[0] : null;\r\n          }\r\n          \r\n          this.$message.success('知识库已删除');\r\n        }\r\n      }).catch(() => {});\r\n    },\r\n    \r\n    handleUploadSuccess(fileData) {\r\n      if (!this.currentKbDetails.files) {\r\n        this.currentKbDetails.files = [];\r\n      }\r\n      \r\n      this.currentKbDetails.files.push({\r\n        id: Date.now(),\r\n        name: fileData.filename,\r\n        type: fileData.type || 'unknown',\r\n        size: fileData.size || 0,\r\n        upload_time: new Date().toISOString()\r\n      });\r\n      \r\n      this.currentKbDetails.file_count = this.currentKbDetails.files.length;\r\n      this.$message.success(`文件\"${fileData.filename}\"上传成功`);\r\n    },\r\n    \r\n    getFileIcon(fileType) {\r\n      const type = fileType.toLowerCase();\r\n      return this.fileTypes[type] || 'el-icon-document';\r\n    },\r\n    \r\n    formatSize(bytes) {\r\n      if (bytes === 0) return '0 B';\r\n      const k = 1024;\r\n      const sizes = ['B', 'KB', 'MB', 'GB'];\r\n      const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n    },\r\n    \r\n    formatDate(dateString) {\r\n      const date = new Date(dateString);\r\n      return `${date.getFullYear()}-${(date.getMonth()+1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;\r\n    },\r\n    \r\n    downloadFile(file) {\r\n      this.$message.info(`开始下载: ${file.name}`);\r\n      // 实际应用中这里应调用API下载文件\r\n    },\r\n    \r\n    previewFile(file) {\r\n      this.$message.info(`预览文件: ${file.name}`);\r\n      // 实际应用中这里应实现文件预览功能\r\n    },\r\n    \r\n    deleteFile(file) {\r\n      this.$confirm(`确定删除文件 \"${file.name}\"?`, '删除确认', {\r\n        confirmButtonText: '删除',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        const fileIndex = this.currentKbDetails.files.findIndex(f => f.id === file.id);\r\n        if (fileIndex !== -1) {\r\n          this.currentKbDetails.files.splice(fileIndex, 1);\r\n          this.currentKbDetails.file_count = this.currentKbDetails.files.length;\r\n          this.$message.success('文件已删除');\r\n        }\r\n      }).catch(() => {});\r\n    },\r\n    \r\n    goToAdmin() {\r\n      this.$router.push('/admin');\r\n    },\r\n    \r\n    logout() {\r\n      this.$confirm('确定要退出登录吗?', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'info'\r\n      }).then(() => {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n        \r\n        if (this.$store) {\r\n          this.$store.commit('setToken', null);\r\n          this.$store.commit('setUser', null);\r\n        }\r\n        \r\n        this.$router.push('/login');\r\n        this.$message.success('您已成功退出登录');\r\n      }).catch(() => {});\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.home-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n  background-color: #f5f7fa;\r\n}\r\n\r\n.app-header {\r\n  background: linear-gradient(135deg, #1e6bc6 0%, #0d4a9e 100%);\r\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0 24px;\r\n  z-index: 100;\r\n  color: white;\r\n}\r\n\r\n.app-title {\r\n  margin: 0;\r\n  font-size: 1.5rem;\r\n  font-weight: 600;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.user-info {\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  color: white;\r\n}\r\n\r\n.username {\r\n  margin-left: 10px;\r\n  margin-right: 6px;\r\n  font-weight: 500;\r\n}\r\n\r\n.main-content {\r\n  display: flex;\r\n  flex: 1;\r\n  overflow: hidden;\r\n  padding: 20px;\r\n  gap: 24px;\r\n  background-color: #f0f2f5;\r\n}\r\n\r\n.knowledge-section {\r\n  flex: 0 0 380px;\r\n  background-color: #fff;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n}\r\n\r\n.chat-section {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #fff;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);\r\n  overflow: hidden;\r\n}\r\n\r\n.section-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 18px;\r\n}\r\n\r\n.section-title {\r\n  margin: 0;\r\n  font-size: 1.3rem;\r\n  font-weight: 600;\r\n  color: #1f2d3d;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.kb-info {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.kb-selector {\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.kb-dropdown {\r\n  width: 100%;\r\n}\r\n\r\n.kb-option {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n}\r\n\r\n.file-count {\r\n  font-size: 0.85rem;\r\n  color: #8492a6;\r\n}\r\n\r\n.upload-header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.upload-header h3 {\r\n  margin: 0;\r\n  font-size: 1.1rem;\r\n  color: #1f2d3d;\r\n}\r\n\r\n.kb-files {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n}\r\n\r\n.file-list {\r\n  flex: 1;\r\n  border: 1px solid #ebeef5;\r\n  border-radius: 6px;\r\n  padding: 8px 0;\r\n  max-height: 300px;\r\n}\r\n\r\n.file-item {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 10px 15px;\r\n  border-bottom: 1px solid #f5f7fa;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.file-item:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.file-item:hover {\r\n  background-color: #f8fafc;\r\n}\r\n\r\n.file-info {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  flex: 1;\r\n}\r\n\r\n.file-details {\r\n  flex: 1;\r\n  min-width: 0;\r\n}\r\n\r\n.file-name {\r\n  font-weight: 500;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.file-meta {\r\n  font-size: 0.8rem;\r\n  color: #99a9bf;\r\n  display: flex;\r\n  gap: 6px;\r\n}\r\n\r\n.file-actions {\r\n  cursor: pointer;\r\n  padding: 5px;\r\n  border-radius: 4px;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.file-actions:hover {\r\n  background-color: #f0f2f5;\r\n}\r\n\r\n.danger-item {\r\n  color: #f56c6c;\r\n}\r\n\r\n.chat-container {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  background-color: #fafbfc;\r\n  border-radius: 8px;\r\n  border: 1px solid #ebeef5;\r\n}\r\n\r\n.chat-wrapper {\r\n  flex: 1;\r\n  display: flex;\r\n  height: 100%;\r\n}\r\n\r\n.chat-box {\r\n  flex: 1;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n}\r\n\r\n.empty-state {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 40px 0;\r\n  text-align: center;\r\n  color: #99a9bf;\r\n}\r\n\r\n.chat-empty {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100%;\r\n  color: #99a9bf;\r\n}\r\n\r\n.empty-image {\r\n  width: 180px;\r\n  height: 180px;\r\n  margin-bottom: 20px;\r\n  opacity: 0.7;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 1200px) {\r\n  .knowledge-section {\r\n    flex: 0 0 320px;\r\n  }\r\n}\r\n\r\n@media (max-width: 992px) {\r\n  .main-content {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .knowledge-section {\r\n    flex: 0 0 auto;\r\n    margin-bottom: 20px;\r\n    width: 100%;\r\n  }\r\n  \r\n  .file-list {\r\n    max-height: 200px;\r\n  }\r\n}\r\n\r\n@media (max-width: 576px) {\r\n  .app-header {\r\n    padding: 0 15px;\r\n  }\r\n  \r\n  .app-title {\r\n    font-size: 1.2rem;\r\n  }\r\n  \r\n  .username {\r\n    display: none;\r\n  }\r\n  \r\n  .main-content {\r\n    padding: 15px;\r\n    gap: 15px;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}